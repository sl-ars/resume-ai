version: '3.8'



services:
  # PostgreSQL service for users and jobs data
  postgres:
    image: postgres:16-alpine
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MongoDB service for resumes data
  mongodb:
    image: mongo:7.0
    env_file:
      - ./backend/.env
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DB}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "${MONGODB_PORT}:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/${MONGODB_DB} --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  # MySQL service for analytics data
  mysql:
    image: mysql:8.3
    env_file:
      - ./backend/.env
    environment:
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and message queue
  redis:
    image: redis:7.2-alpine
    env_file:
      - ./backend/.env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend service - Django API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_ENV: ${DJANGO_ENV}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      MONGODB_HOST: mongodb://mongodb:27017/
      MONGODB_DB: ${MONGODB_DB}
      MYSQL_DB: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "${BACKEND_PORT}:8000"

  # Frontend service - React with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:80"
    volumes:
      - backend_static:/usr/share/nginx/html/static
      - backend_media:/usr/share/nginx/html/media

volumes:
  postgres_data:
  mongodb_data:
  mysql_data:
  redis_data:
  backend_static:
  backend_media: